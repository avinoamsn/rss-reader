{"version":3,"sources":["redux/Actions.tsx","redux/Reducers.tsx","redux/Store.tsx","components/Form.tsx","components/Reader.tsx","components/Spinner.tsx","components/Error.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["Types","REQUEST_FEED","RECIEVE_FEED","ERROR","RENDER_ITEM","requestFeed","url","type","payload","recieveFeed","feed","items","catchError","error","message","Actions","parser","Parser","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","parseURL","err","stop","_x","apply","this","arguments","item","defaultState","isFetching","errorMessage","renderedItems","numRenderedItems","state","length","undefined","action","ACTIONS","assign","concat","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Form","memo","fetchFeed","_useState","useState","_useState2","slicedToArray","setUrl","react_default","createElement","onSubmit","e","preventDefault","handleSubmit","value","onChange","target","connect","Reader","timer","scheduleNextUpdate","_this","setTimeout","updateRenderedItems","props","renderItem","clearTimeout","id","map","i","href","guid","title","moment","isoDate","fromNow","contentSnippet","Component","Spinner","randomAnimation","animationDelay","Math","random","renderSpinner","style","className","Error","show","setShow","useEffect","onClick","store","initialState","createStore","applyMiddleware","thunkMiddleware","logger","persistor","persistStore","configureStore","REDUX_INITIAL_DATA","App","es","integration_react","loading","components_Form","components_Spinner","components_Reader","components_Error","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfd9bf3f.chunk.js","sourcesContent":["import Parser from 'rss-parser';\r\n\r\n// action type(s)\r\nconst Types = {\r\n\tREQUEST_FEED: 'REQUEST_FEED',\r\n\tRECIEVE_FEED: 'RECIEVE_FEED',\r\n\tERROR: 'ERROR',\r\n\tRENDER_ITEM: 'RENDER_ITEM',\r\n};\r\n\r\n// action(s)\r\nconst requestFeed = (url: string) => ({\r\n\ttype: Types.REQUEST_FEED,\r\n\tpayload: url,\r\n});\r\n\r\nconst recieveFeed = (feed: any) => ({\r\n\ttype: Types.RECIEVE_FEED,\r\n\tpayload: feed.items,\r\n});\r\n\r\nconst catchError = (error: any) => ({\r\n\ttype: Types.ERROR,\r\n\tpayload: error.message || 'Something went wrong.',\r\n});\r\n\r\nconst renderItem = (item: any) => ({\r\n\ttype: Types.RENDER_ITEM,\r\n\tpayload: item,\r\n});\r\n\r\n/**\r\n * Action creator that handles asynchronous requests.\r\n * \r\n * Redux-thunk lets us pass the dispatch method as an argument to the returned\r\n * function, which in turn lets the function dispatch actions itself.\r\n * \r\n * @param url the URL of the RSS feed\r\n */\r\nconst fetchFeed = (url: any) => {\r\n\t// proxy server to avoid CORS, clone of https://github.com/Rob--W/cors-anywhere/\r\n\t// there is likely a better way to handle this on a prod server, but this works for now\r\n\tconst PROXY_URL = 'https://boiling-citadel-49650.herokuapp.com/';\r\n\tconst parser = new Parser();\r\n\r\n\treturn async(dispatch: any) => {\r\n\t\tdispatch(requestFeed(url))\r\n\t\t// parser returns feed as a JSON object\r\n\t\tparser.parseURL(PROXY_URL + url, (err, feed) => {\r\n\t\t\tif(err)\r\n\t\t\t\tdispatch(catchError(err));\r\n\t\t\telse\r\n\t\t\t\tdispatch(recieveFeed(feed));\r\n\t\t});\r\n\t\t;\r\n\t}\r\n};\r\n\r\nexport default {\r\n\tfetchFeed,\r\n\trenderItem,\r\n\tcatchError,\r\n\tTypes,\r\n};\r\n","import  { ACTIONS } from '.';\r\n\r\nconst defaultState = {\r\n\turl: '',\r\n\tisFetching: false,\r\n\tfeed: [],\r\n\terror: false,\r\n\terrorMessage: '',\r\n\trenderedItems: [],\r\n\tnumRenderedItems: 0,\r\n}\r\n\r\nconst feed = (state = defaultState, action: any) => {\r\n\tswitch(action.type) {\r\n\t \tcase ACTIONS.Types.REQUEST_FEED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tisFetching: true,\r\n\t\t\t\terror: false,\r\n\t\t\t\terrorMessage: '',\r\n\t\t\t});\r\n\t\tcase ACTIONS.Types.RECIEVE_FEED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tisFetching: false,\r\n\t\t\t\tfeed: action.payload,\r\n\t\t\t\trenderedItems: [],\r\n\t\t\t\tnumRenderedItems: 0,\r\n\t\t\t});\r\n\t\tcase ACTIONS.Types.ERROR:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\tisFetching: false,\r\n\t\t\t\terror: true,\r\n\t\t\t\terrorMessage: action.payload,\r\n\t\t\t});\r\n\t\tcase ACTIONS.Types.RENDER_ITEM:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trenderedItems: state.renderedItems.concat(state.feed[state.numRenderedItems]),\r\n\t\t\t\tnumRenderedItems: state.numRenderedItems + 1,\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport default feed;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport { rootReducer } from '.';\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n// enhancer for Redux DevTools\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default function configureStore(initialState: any) {\r\n  const store = createStore(\r\n\t\tpersistedReducer,\r\n\t\tinitialState,\r\n\t\tcomposeEnhancers(applyMiddleware(\r\n\t\t\tthunkMiddleware,\r\n\t\t\tlogger // https://github.com/LogRocket/redux-logger/issues/302\r\n\t\t\t)),\r\n\t\t);\r\n\tconst persistor = persistStore(store);\r\n  return { store, persistor };\r\n}\r\n","import React, { useState, FunctionComponent, memo } from 'react';\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { ACTIONS } from \"../redux\";\r\n\r\ninterface FormProps {\r\n\tfetchFeed(url: string): void,\r\n}\r\n\r\nconst Form: FunctionComponent<FormProps> = memo(({ fetchFeed }) => {\r\n\tconst [url, setUrl] = useState('');\r\n\r\n\tconst handleSubmit = (e: any) => {\r\n\t\te.preventDefault();\r\n\t\tfetchFeed(url);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1><span>a</span>reses</h1>\r\n\r\n\t\t\t<form onSubmit={e => handleSubmit(e)}>\r\n\t\t\t\t<input type=\"text\" value={url} onChange={e => setUrl(e.target.value)} />\r\n\t\t\t\t<input type=\"submit\" value=\"fetch feed\" />\r\n\t\t\t</form>\r\n\t\t</header>\r\n\t)\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n\tfetchFeed: (url: string) => dispatch(ACTIONS.fetchFeed(url)),\r\n});\r\n\r\nexport default connect(\r\n\tnull, // https://tinyurl.com/y63rhvg5\r\n\tmapDispatchToProps,\r\n)(Form);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { ACTIONS } from '../redux';\r\n\r\ninterface ReaderProps {\r\n\tfeed: [],\r\n\tisFetching: boolean,\r\n\trenderedItems: [],\r\n\tnumRenderedItems: number,\r\n\trenderItem(item: any): void,\r\n}\r\n\r\nclass Reader extends Component<ReaderProps> {\r\n\ttimer!: NodeJS.Timeout;\r\n\r\n\tcomponentDidUpdate() {\r\n\t\t// starts the rendering loop\r\n\t\tif(this.props.feed.length !== 0 && this.props.numRenderedItems === 0)\r\n\t\t\tthis.scheduleNextUpdate();\r\n\t}\r\n\r\n\t// component doesn't currently unmount, but this is necessary in that scenario\r\n\tcomponentWillUnmount() {\r\n\t\tclearTimeout(this.timer);\r\n\t}\r\n\r\n\t// sets timer for each item added to renderedItems\r\n\tscheduleNextUpdate = (): void => {\r\n\t\tthis.timer = setTimeout(this.updateRenderedItems, 40);\r\n\t}\r\n\r\n\t// Renders each item from the feed successively, with a timeout in between each iteration.\r\n\tupdateRenderedItems = (): void => {\r\n\t\tthis.props.renderItem(this.props.feed[this.props.numRenderedItems]);\r\n\r\n\t\tif(this.props.feed.length > this.props.numRenderedItems)\r\n\t\t\tthis.scheduleNextUpdate();\r\n\t}\r\n\r\n\trender() {\r\n\t\t// checks for loading\r\n\t\tif (!this.props.isFetching)\r\n\t\t\treturn (\r\n\t\t\t\t<ul id=\"feed\">\r\n\t\t\t\t\t{this.props.renderedItems.map((item: any, i: number) =>\r\n\t\t\t\t\t\titem &&\t\t\t\t\t\t\r\n\t\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t\t<a href={item.guid}>\r\n\t\t\t\t\t\t\t\t<h2>{item.title}</h2>\r\n\t\t\t\t\t\t\t\t<h5>{moment(item.isoDate).fromNow()}</h5>\r\n\t\t\t\t\t\t\t\t<p>{item.contentSnippet}</p>\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</ul>\r\n\t\t\t)\r\n\t\telse\r\n\t\t\treturn null;\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tfeed: state.feed,\r\n\tisFetching: state.isFetching,\r\n\trenderedItems: state.renderedItems,\r\n\tnumRenderedItems: state.numRenderedItems,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n\trenderItem: (item: any) => dispatch(ACTIONS.renderItem(item)),\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps,\r\n)(Reader)\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface SpinnerProps {\r\n\tisFetching: boolean;\r\n}\r\n\r\nclass Spinner extends Component<SpinnerProps> {\r\n\trandomAnimation = () => {\r\n\t\treturn { animationDelay: Math.random() / 3.2 + 's' };\r\n\t}\r\n\r\n\trenderSpinner =() => {\r\n\t\tif(this.props.isFetching) {\r\n\t\t\treturn (\r\n\t\t\t\t<div id=\"spinner\">\r\n\t\t\t\t\t<div style={this.randomAnimation()} className=\"spinner-component\" id=\"spin-1\" />\r\n\t\t\t\t\t<div style={this.randomAnimation()} className=\"spinner-component\" id=\"spin-2\" />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<div style={this.randomAnimation()} className=\"spinner-component\" id=\"spin-3\" />\r\n\t\t\t\t\t<div style={this.randomAnimation()} className=\"spinner-component\" id=\"spin-4\" />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else\r\n\t\t\treturn null;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (this.renderSpinner());\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\tisFetching: state.isFetching,\r\n});\r\n\r\nexport default connect(\r\n\tmapStateToProps,\r\n)(Spinner);\r\n","import React, { useState, useEffect, FunctionComponent, memo } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface ErrorProps {\r\n\terror: boolean,\r\n\terrorMessage: string,\r\n}\r\n\r\n/**\r\n * @TODO use reducer to set error to false once dismissed(?)\r\n */\r\nconst Error: FunctionComponent<ErrorProps> = memo(({ error, errorMessage }) => {\r\n\tconst [show, setShow] = useState(false);\r\n\r\n\t// avoid infinite loop by checking if error & errorMessage have changed\r\n\tuseEffect(() => setShow(true), [error, errorMessage]);\r\n\r\n\tif(error && show)\r\n\t\treturn(\r\n\t\t\t<div className=\"error\">\r\n\t\t\t\t<h3>ERROR:</h3> \r\n\t\t\t\t<p>{errorMessage}</p>\r\n\t\t\t\t<p>This may not be a valid RSS feed. Please try a different URL.</p>\r\n\t\t\t<button onClick={e => setShow(false)}>dismiss</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\telse\r\n\t\treturn null;\r\n})\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n\terror: state.error,\r\n\terrorMessage: state.errorMessage,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Error);\r\n","import React from 'react';\n\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { configureStore } from './redux';\n\nimport { Form, Reader, Spinner, Error } from './components';\nimport './App.scss';\n\nexport const store = configureStore((window as any).REDUX_INITIAL_DATA);\n\nfunction App() {\n  return (\n\t\t<ReduxProvider store={store.store}>\n\t\t\t<PersistGate loading={null} persistor={store.persistor}>\n\t\t\t\t<div id=\"app\">\n\t\t\t\t\t<Form />\n\t\t\t\t\t<Spinner />\n\t\t\t\t\t<Reader />\n\t\t\t\t\t<Error />\n\t\t\t\t</div>\n\t\t\t</PersistGate>\n\t\t</ReduxProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: { onUpdate: (arg0: ServiceWorkerRegistration) => void; onSuccess: (arg0: ServiceWorkerRegistration) => void; }) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: RequestInfo, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW((swUrl as any), config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}